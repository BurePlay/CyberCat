Вот упрощенный пример, показывающий обработку одного из URL в Go:



package main

import (
    "net/http"
    "github.com/go-redis/redis/v8"
    "context"
)

var ctx = context.Background()

func main() {
    http.HandleFunc("/", handleRoot)
    http.HandleFunc("/login", handleLogin)
    http.HandleFunc("/logout", handleLogout)
    // Добавьте другие маршруты по необходимости
    http.ListenAndServe(":8080", nil)
}

func handleRoot(w http.ResponseWriter, r *http.Request) {
    sessionKey := r.Cookie("session_token").Value
    // Запрос к Redis
    userStatus := checkSessionInRedis(sessionKey)
    
    if userStatus == "Authorized" {
        // Возвращаем страницу личного кабинета
        w.Write([]byte("Welcome to your personal dashboard!"))
    } else {
        // Redirect to login or homepage
        http.Redirect(w, r, "/", http.StatusSeeOther)
    }
}

func handleLogin(w http.ResponseWriter, r *http.Request) {
    // Логика входа
    http.Redirect(w, r, "/", http.StatusSeeOther)
}

func handleLogout(w http.ResponseWriter, r *http.Request) {
    sessionKey := r.Cookie("session_token").Value
    removeSessionFromRedis(sessionKey)
    // Удаляем куки
    http.SetCookie(w, &http.Cookie{Name: "session_token", Value: "", MaxAge: -1})
    http.Redirect(w, r, "/", http.StatusSeeOther)
}

// Функции работы с Redis
func checkSessionInRedis(token string) string {
    // Ваша логика для проверки сессии в Redis
    return "Authorized"  // Пример (в реальности вы получите статус из Redis)
}

func removeSessionFromRedis(token string) {
    // Ваша логика для удаления сессии из Redis
}
